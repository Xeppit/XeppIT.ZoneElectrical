@page "/administration"
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@using XeppIT.ZoneElectrical.Identity.Services
@using XeppIT.ZoneElectrical.Identity.Shared
@inject UserManager<ApplicationUser> _UserManager
@inject RoleManager<ApplicationRole> _RoleManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject DialogService dialogService
@inject AdminIdentityService _identityUserService

    <AuthorizeView Roles="ADMIN">
        <Authorized>
            <div class="container-fluid">
                <div class="row">
                    <h3>Administration</h3>
                </div>
                <div class="row">
                    <button type="button" class="btn btn-primary mb-3" @onclick="() => OpenNewUserDialog()">New User</button>
                </div>
                <div class="row">
                    <div class="table-responsive">
                        <table class="table table-striped table-dark">
                            <thead>
                            <tr>
                                <th scope="col">Display Name</th>
                                <th scope="col">Username</th>
                                <th scope="col">Email</th>
                                <th scope="col">Roles</th>
                                <th scope="col">Edit</th>
                                <th scope="col">Reset</th>
                                <th scope="col">Delete</th>
                            </tr>
                            </thead>
                            <tbody>
                            @foreach (var user in Users)
                            {
                                <tr>
                                    <td>@user.DisplayName</td>
                                    <td>@user.UserName</td>
                                    <td>@user.Email</td>
                                    <td>@user.RoleString</td>
                                    <td><button type="button" class="btn btn-primary" @onclick="() => OpenEditUserDialog(user)"><span class="oi oi-pencil"></span></button></td>
                                    <td><button type="button" class="btn btn-primary" @onclick="() => OpenPasswordResetDialog(user)"><span class="oi oi-key"></span></button></td>
                                    <td><button type="button" class="btn btn-danger" @onclick="() => DeleteUser(user)"><span class="oi oi-ban"></span></button></td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </Authorized>
        <NotAuthorized>
            <p>You're not logged in as admin.</p>
        </NotAuthorized>
    </AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    System.Security.Claims.ClaimsPrincipal _currentUser;

    List<ApplicationUser> Users { get; set; } = new List<ApplicationUser>();

    protected override async Task OnInitializedAsync()
    {
        // Get the current logged in user
        _currentUser = (await AuthenticationStateTask).User;

        await GetUsers();
    }

    public async Task GetUsers()
    {
        var users = await _identityUserService.GetUsers();

        Users.Clear();

        foreach (var user in users)
        {
            Users.Add(user);
        }
    }

    async Task OpenNewUserDialog()
    {
        await dialogService.OpenAsync<ApplicationUserNewDialog>($"New User");

        await GetUsers();

        StateHasChanged();
    }
    
    async Task OpenEditUserDialog(ApplicationUser user)
    {
        await dialogService.OpenAsync<ApplicationUserEditDialog>($"Edit {user.UserName} profile",
            new Dictionary<string, object>() { { "UserToEdit", user } });

        await GetUsers();

        StateHasChanged();
    }

    async Task OpenPasswordResetDialog(ApplicationUser user)
    {
        await dialogService.OpenAsync<ApplicationUserResetPasswordDialog>($"Reset {user}'s Password",
            new Dictionary<string, object>() { { "UserToResetPassword", user } });
    }

    async Task DeleteUser(ApplicationUser user)
    {
        await _identityUserService.DeleteUser(user);

        await GetUsers();

        StateHasChanged();
    }
}
