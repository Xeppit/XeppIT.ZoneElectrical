@page "/addresses"
@using XeppIT.ZoneElectrical.Rolodex.Models
@using XeppIT.ZoneElectrical.Rolodex.Shared
@using XeppIT.ZoneElectrical.Unclassified
@inject NavigationManager NavigationManager

@inject RolodexService RolodexService
@inject NavigationArgs NavigationArgs

@if (AddressList == null)
{
    <div class="spinner"></div>
}
else
{
    <TableRowCell><Button @onclick="() => OpenTestDialog(addressTest1)">rooooof</Button></TableRowCell>

    <AuthorizeView Roles="EMPLOYEE">
        <Authorized>
            <Row>
                <Column>
                    <Card Margin="Margin.Is4.OnY">
                        <CardHeader>
                            <CardTitle>Address List</CardTitle>
                        </CardHeader>
                        <CardBody>
                            <Field>
                                <FieldLabel>Search</FieldLabel>
                                <TextEdit Placeholder="Enter name" Text="@_nameSearchString" TextChanged="@OnNameChanged">
                                    <FieldHelp>Please name to search for.</FieldHelp>
                                </TextEdit>
                            </Field>
                        </CardBody>
                        <CardBody>
                            <Table Narrow="true">
                                <TableHeader>
                                    <TableRow>
                                        <TableHeaderCell>Name</TableHeaderCell>
                                        <TableHeaderCell>Street</TableHeaderCell>
                                        <TableHeaderCell>Town</TableHeaderCell>
                                        <TableHeaderCell>Postcode</TableHeaderCell>
                                        <TableHeaderCell>Edit</TableHeaderCell>
                                        <TableHeaderCell>Delete</TableHeaderCell>
                                    </TableRow>
                                </TableHeader>
                                <TableBody>
                                    @foreach (var address in AddressList)
                                    {
                                        <TableRow>
                                            <TableRowCell>@address.Name</TableRowCell>
                                            <TableRowCell>@address.Street</TableRowCell>
                                            <TableRowCell>@address.Town</TableRowCell>
                                            <TableRowCell>@address.Postcode</TableRowCell>
                                            <TableRowCell><Button @onclick="() => OpenEditDialog(address)"><span class="oi oi-pencil" /></Button></TableRowCell>
                                            <TableRowCell><Button @onclick="() => Delete(address)"><span class="oi oi-ban" /></Button></TableRowCell>
                                        </TableRow>
                                    }
                                </TableBody>
                            </Table>
                        </CardBody>
                    </Card>
                </Column>
            </Row>
        </Authorized>
        <NotAuthorized>
            <p>You're not logged in as admin.</p>
        </NotAuthorized>
    </AuthorizeView>
}


@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    List<Address> AddressList { get; set; }

    Address addressTest1 = new Address(){Name = "tittys"};

    private string _nameSearchString;

    private Modal modalRef;

    protected override async Task OnInitializedAsync()
    {
        AddressList = await RolodexService.FindAllAddressesAsync();
    }

    public async Task RefreshList()
    {
        var addressList = await RolodexService.FindAllAddressesAsync();

        AddressList.Clear();

        foreach (var address in addressList)
        {
            AddressList.Add(address);
        }

        StateHasChanged();
    }

    async Task OnNameChanged(string value)
    {
        _nameSearchString = value;

        var addressList = await RolodexService.FindAllAddressesByNameAsync(value);
        AddressList.Clear();

        foreach (var address in addressList)
        {
            AddressList.Add(address);
        }

        StateHasChanged();
    }



    async Task OpenNewDialog()
    {

        await RefreshList();

        StateHasChanged();
    }

    async Task OpenEditDialog(Address address)
    {

        await RefreshList();

        StateHasChanged();
    }

    async Task Delete(Address address)
    {
        await RolodexService.DeleteAddressAsync(address);

        await RefreshList();

        StateHasChanged();
    }

    private void OpenTestDialog(Address address)
    {
        NavigationArgs.NavigateTo("TestDialog", "Addresses", address);
    }

}
