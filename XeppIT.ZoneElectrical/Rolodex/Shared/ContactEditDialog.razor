@using XeppIT.ZoneElectrical.Rolodex.Contacts.Model
@using XeppIT.ZoneElectrical.Rolodex.Companies.Model
@inject RolodexService RolodexService


<div class="container-fluid">
    <div class="row mb-3">
        <div class="col-12 mb-1">
            <label for="Name" class="form-check-label">Name</label>
            <input id="Name" class="form-control mb-3" type="text" aria-label="Name" @bind-value="@FirstName">
        </div>
        <div class="col-12 mb-1">
            <label for="Street" class="form-check-label">Street</label>
            <input id="Street" class="form-control mb-3" type="text" aria-label="Street" @bind-value="@LastName">
        </div>
        <div class="col-12 mb-1">
            <label for="Town" class="form-check-label">Town</label>
            <input id="Town" class="form-control mb-3" type="text" aria-label="Town" @bind-value="@Email">
        </div>
        <div class="col-12 mb-1">
            <label for="Postcode" class="form-check-label">Postcode</label>
            <input id="Postcode" class="form-control mb-3" type="text" aria-label="Postcode" @bind-value="@PhoneNumber">
        </div>
        <div class="col-12 mb-1">
            <label for="Postcode" class="form-check-label">Postcode</label>

        </div>
    </div>
    <div class="row justify-content-end">
        <button type="button" class="btn btn-primary" @onclick="() => Save()">Save</button>
        <button type="button" class="btn btn-secondary ml-1" @onclick="() => Cancel()">Cancel</button>
    </div>
</div>

@code {
    [Parameter] public Contact Context { get; set; }

    List<Company> CompanyList = new List<Company>();

    public string FirstName { get; set; }
    public string LastName { get; set; }
    public string Email { get; set; }
    public string PhoneNumber { get; set; }
    public string Company { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        FirstName = Context.FirstName;
        LastName = Context.LastName;
        Email = Context.Email;
        PhoneNumber = Context.PhoneNumber;
        Company = Context.Company;

        await GetCompanyList();

        //return base.OnParametersSetAsync();
    }

    private async Task GetCompanyList()
    {
        var tempList = await RolodexService.FindAllCompaniesAsync();

        foreach (var company in tempList)
        {
            CompanyList.Add(company);
        }
    }

    async Task Change(object value, string name)
    {
        if (await RolodexService.CompanyNameExistsAsync(value.ToString()))
        {
            Company = value.ToString();
        }
        else
        {

        }
    }

    async Task Save()
    {
        Context.FirstName = FirstName;
        Context.LastName = LastName;
        Context.Email = Email;
        Context.PhoneNumber = PhoneNumber;
        Context.Company = Company;

        await RolodexService.UpdateContactAsync(Context);

    }

    void Cancel()
    {

    }
}