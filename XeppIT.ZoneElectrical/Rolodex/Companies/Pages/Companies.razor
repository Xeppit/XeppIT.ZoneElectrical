@page "/companies"
@using XeppIT.ZoneElectrical.Project.Models
@using XeppIT.ZoneElectrical.Project.Shared
@using XeppIT.ZoneElectrical.Project
@using XeppIT.ZoneElectrical.Rolodex.Companies.Model
@using XeppIT.ZoneElectrical.Rolodex.Shared

@inject RolodexService RolodexService


<AuthorizeView Roles="EMPLOYEE">
    <Authorized>
        <div class="container-fluid">
            <div class="row">
                <h3>Company List</h3>
            </div>
            <div class="row">
                <button type="button" class="btn btn-primary mb-3" @onclick="OpenNewDialog">New </button>
            </div>
            <div class="row">
                <div class="table-responsive">
                    <table class="table table-striped table-dark">
                        <thead>
                            <tr>
                                <th scope="col">Name</th>
                                <th scope="col">Edit</th>
                                <th scope="col">Delete</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in ContextList)
                            {
                                <tr>
                                    <td>@item.Name</td>
                                    <td><button type="button" class="btn btn-primary" @onclick="() => OpenEditDialog(item)"><span class="oi oi-pencil"></span></button></td>
                                    <td><button type="button" class="btn btn-danger" @onclick="() => Delete(item)"><span class="oi oi-ban"></span></button></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <p>You're not logged in as admin.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    System.Security.Claims.ClaimsPrincipal _currentUser;

    List<Company> ContextList { get; set; } = new List<Company>();

    protected override async Task OnInitializedAsync()
    {
        // Get the current logged in user
        _currentUser = (await AuthenticationStateTask).User;

        await GetContextList();
    }

    public async Task GetContextList()
    {
        var newContextList = await RolodexService.FindAllCompaniesAsync();

        ContextList.Clear();

        foreach (var context in newContextList)
        {
            ContextList.Add(context);
        }
    }

    async Task OpenNewDialog()
    {


        await GetContextList();

        StateHasChanged();
    }

    async Task OpenEditDialog(Company company)
    {

        await GetContextList();

        StateHasChanged();
    }

    async Task Delete(Company company)
    {
        await RolodexService.DeleteCompanyAsync(company);

        await GetContextList();

        StateHasChanged();
    }
}
