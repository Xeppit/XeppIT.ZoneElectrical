@page "/editcompany"
@using XeppIT.ZoneElectrical.Rolodex.Companies.Model
@using XeppIT.ZoneElectrical.Rolodex.Companies.States

@inject IJSRuntime JsRuntime
@inject CompanyEditState CompanyEditState
@inject RolodexService RolodexService

<Alert @ref="_alertRef" Color="Color.Danger">
    <AlertMessage>
        Edit Failed -
    </AlertMessage>
    <AlertDescription>
        Failed to edit the company.
    </AlertDescription>
    <CloseButton />
</Alert>

<Row>
    <Column>
        <Card Margin="Margin.Is4.OnY">
            <CardHeader>
                <CardTitle> Create New Company</CardTitle>
            </CardHeader>
            <CardBody>
                <Field>
                    <FieldLabel>Name</FieldLabel>
                    <Validation Validator="@ValidateName">
                        <TextEdit Placeholder="Enter name" @bind-Text="@_tempCompany.Name">
                            <Feedback>
                                <ValidationNone>Please enter the name.</ValidationNone>
                                <ValidationSuccess>Name is good.</ValidationSuccess>
                                <ValidationError>Enter valid name!</ValidationError>
                            </Feedback>
                        </TextEdit>
                    </Validation>
                </Field>
            </CardBody>
            <CardFooter>
                <Button @onclick="Save">Save</Button>
                <Button @onclick="Cancel">Cancel</Button>
            </CardFooter>
        </Card>
    </Column>
</Row>


@code{
    Alert _alertRef = new Alert();
    readonly Company _tempCompany = new Company();

    protected override void OnInitialized()
    {
        if (CompanyEditState.CompanyToEdit != null)
        {
            _tempCompany.Id = CompanyEditState.CompanyToEdit.Id;
            _tempCompany.Name = CompanyEditState.CompanyToEdit.Name;
        }
    }

    private async Task Save()
    {
        var result = await RolodexService.UpdateCompanyAsync(_tempCompany);

        if (result.IsAcknowledged)
        {
            if (result.ModifiedCount == 0)
            {
                _alertRef.Show();
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("goBack");
            }
        }
        else
        {
            _alertRef.Show();
        }
    }

    private async Task Cancel()
    {
        await JsRuntime.InvokeVoidAsync("goBack");
    }

    private void ValidateName(ValidatorEventArgs e)
    {
        var value = Convert.ToString(e.Value);

        e.Status = string.IsNullOrEmpty(value) ? ValidationStatus.None : ValidationStatus.Success;
    }
}